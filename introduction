--> kubernatis is a container archistration tool. Kubernatis will not know about containers,it will know or it will deals with only pods, 
    and pods is group of containers. 

ARCHITECTURE OF K8S:
C --> clustor (master and worknode)
N --> node
p --> pod
C --> container
A --> application

MASTER NODE COMPONANTS:                                                                          
             1. API server ( API server will take commands from user and exicute and give o/p to user, 
                             and it used to communicate in cluster)     
             2. etcd (it is like a data base to k8s)                                                                                           
             3. controll manager
                         1. cloud controll manager (if we are implementing k8s on could than its called as cc manager)
                         2. kube controll manager ( if we are implementing on non cloud)
             4. scheduler ( it schedules work for worker node/pod based on hardware properties of server)
WORKER NODE COMPONANTS:
             1. kubelete (  it going to be as agent it will inform to master, it is used to monitor to pods(stopped, deleted, or stopped))
             2. kube proxy ( its like a network)
             3. pods( group of containers)
             4. container ( it is vm not having os in it)
             
 we cant setup k8s in many ways:
             self managed kubernatis clusters are,                                        cloud managed kubernatis cluster are
             1.minikube --> single node cluster ( it used to in only dev and test envir)      1. aws kubernatis clusters
             2.kubeadm --> multi node cluster (manual way of creating cluster)                2. azure kubernatis cluster
             3. kap --> multi node cluster (automation way of creating cluster)               3. google cloud cluster
             
  NOTE: In real time we dont use minikube in realtime i.e, production environment.
  
 To setup minikube:
      1. 2cpus
      2. 2gb of ram
      3. 20 gb of ebs volume.
      4. internet connection
      5. one docker install
NOTE: kubectl is command line tool for kubernatis and which is used to exicutes commands on kubernatis cluster.


POD: pod is a group of containers, it is a smallest unit of k8s which can deployable. inside we have containers, inside we have application.
the prod can be created on two ways:
1.Imperative     --> we create pods in this method by using commands 
2. Declarative   --> we create pods in this by using MANIFEST file, and the manifest file is in form of YAML file.
NOTE: It is always best to prefer DECLARATIVE method bcz in imparative it is not possible to define all the info and specifications of a pod

here now installing kubernatis by using script file , here we taking ubutu vm and it has many default directories we get while installing, so its
better to create a new directory and install all the set up for k8s in that directory.

mkdir project, in this we work with k8s now.
vim minikube.sh
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install curl wget apt-transport-https -y
          sudo curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube
          sudo minikube version
          sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          sudo echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          sudo minikube start --driver=docker --force
now run thsi script as follows
         --> sh minikube.sh 
         ..............................................................................................
now the kubernatis has been installed now we can create pods bu using imparative or declarative method,
IMPERATIVE: creating pods by command line 

        --> kubectl run pod1 --image=sairamana07/movies:latest
        --> kubectl get pods --> to get list of pods 
        --> kubectl get pod -o wide --> it will give additional information  of pods
        --> kubectl describe pod pod1 --> it will give end to end info of pod.
        --> kubectl delete pod pod1 --> to delete pod.
        --> kubectl api-resources --> will give kubernatis information and help about commands.
        
DECLARATIVE: in this we create pod by manifest file, and this manifest file is in yaml format.        
                
        --> vim pod1.yml
                    apiVersion: V1
                    kind: pod
                    metadata:
                      name: pod1
                    spec:
                      containers:
                      - name: cont1
                      image: nginx
         NOT YET TO  BE COMPLETED
********************************************************************************************************************************************
DAY02,09-06-23.
 in generally when we got deleted the pod than the use not cannot able access the application like before, because in normal methods of pod 
 creation we have not to creat a replications of a pod so to over come this we have REPLICA SETS pod creation method.

REPLICA SETS: 
            -> it will creates multiple copys or replicas of a pod, if we delete one pod than the replica set create another pod.
            
            --> vim abcd.yml
                        apiVersion: apps/v1      --> here we are using apps/v1 is version for replicaset
                        kind: ReplicaSet         --> the kind of object is ReplicaSet and here R&S must be capital
                        metadata:
                          labels:                 --> label is a uniq tag used to identify the pod(if we have multiple pods than we want to 
                                                      replicate perticualar group of pods than the label will identify that group of pods by
                                                      the uniq name ex, 5 pods--> swiggy, 5pods--> zomato than if we want to replicate than 
                                                      directly we pickup swiggy pods by allocating the uniq name as label)
                                                      the main purpose assinging label to a pod is to manage multiple pods at a single time
                                                      with same labels.
                            app: swiggy      --> creating pod name
                            name: swiggy-rs   --> we can use rs or replicaset and rs is a shortcut for replicaset. and here we can give
                                                     any name that is our choise ex., abcd-rs
                        spec:                    --> specification of replicaset
                          replicas: 3
                          selector:              --> this selector will select the group of pods by label
                            matchLabels:
                              app: swiggy-rs
                        template:
                          containers:
                            - name: cont1
                              image: nginx
perfect indentain is,
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  labels:
    app: swiggy
  name: swiggy-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
        - name: cont1
          image: nginx
--> kubectl create -f abcd.yml --> creating resource file from file abcd.yml( creating pod from resource file abcd.yml)
--> kubectl get pods           --> here we seen the three riplicas and in running state 
--> kubectl delete pod podname --> to delete one pod from replica set and at the deleting pod immediatly another pod will be created bcs here 
                                    we creating pod as replicaset method. and we are having swiggy as a label for these 3 pods.
--> kubectl run zomato1 --image=nginx --> crating pod with other label by imperative method
--> kubectl run zomato2 --image=nginx
--> kubectl run zomato3 --image=nginx
now to see the pods with labels by 
--> kubectl get pods --show-labels --> here we can see the 3 pods with swiggy label and 3 pods with zomato label
                                       so by this example we can understand what exactly happen to how to use label while pod creation.
--> kubectl get replicaset --> it will show the how many replicas we have and with replicaset name as well.
                              {if we create pod as normal it doesnt give replicas of pod but when when use rs method than we get replicas}
--> kubectl api-resources --> is to describe full info kubernatis                               
--> kubectl describe rs swiggy-rs --> it will give complete info swiggy rs replica set
EVENTS: actions having in kubernatis cluster
--> kubectl scale rs swiggy-rs --replicas=10  --> it scale the swiggy-rs label pods
                                       ( and here only the swiggy labeled pods will be scalled but not the zomato pods bcz we have applied 
                                         scale for only replica sets but not for normal pods)
--> kubectl scale rs swiggy-rs --replicas=5  --> it scale down the replicasets 
--> kubectl delete rs swiggy-rs       --> it will delete the replicaset of swiggy labled pods, but here the containers not going to be 
                                                created after immediate delition like docker swarm or replicaset bcz here we are delting the 
                                                entire replicaset but not only the pod. 
--> kubectl get pods  --> so now it will give now only the zomoto pods only bcz the reason is explained in above statement.

            


LIMITATIONS OF REPLICASET:





                                    
                                    

                        
                            
                        



        
              
              

