--> Kubernatis will not know about containers, it will know or it will deals with only pods, and pods is group of containers. 

ARCHITECTURE OF K8S:
C --> clustor (master and worknode)
N --> node
p --> pod
C --> container
A --> application

MASTER NODE COMPONANTS:                                                                          
             1. API server ( API server will take commands from user and exicute and give o/p to user, 
                             and it used to communicate in cluster)     
             2. etcd (it is like a data base to k8s)                                                                                           
             3. controll manager
                         1. cloud controll manager (if we are implementing k8s on could than its called as cc manager)
                         2. kube controll manager ( if we are implementing on non cloud)
             4. scheduler ( it schedules work for worker node/pod based on hardware properties of server)
WORKER NODE COMPONANTS:
             1. kubelete (  it going to be as agent it will inform to master, it is used to monitor to pods(stopped, deleted, or stopped))
             2. kube proxy ( its like a network)
             3. pods( group of containers)
             4. container ( it is vm not having os in it)
             
 we cant setup k8s in many ways:
             self managed kubernatis clusters are,                                        cloud managed kubernatis cluster are
             1.minikube --> single node cluster ( it used to in only dev and test envir)      1. aws kubernatis clusters
             2.kubeadm --> multi node cluster (manual way of creating cluster)                2. azure kubernatis cluster
             3. kap --> multi node cluster (automation way of creating cluster)               3. google cloud cluster
             
  NOTE: In real time we dont use minikube in realtime i.e, production environment.
  
 To setup minikube:
      1. 2cpus
      2. 2gb of ram
      3. 20 gb of ebs volume.
      4. internet connection
      5. one docker install
NOTE: kubectl is command line tool for kubernatis and which is used to exicutes commands on kubernatis cluster.


POD: pod is a group of containers, it is a smallest unit of k8s which can deployable. inside we have containers, inside we have application.
the prod can be created on two ways:
1.Imperative     --> we create pods in this method by using commands 
2. Declarative   --> we create pods in this by using MANIFEST file, and the manifest file is in form of YAML file.
NOTE: It is always best to prefer DECLARATIVE method bcz in imparative it is not possible to define all the info and specifications of a pod

here now installing kubernatis by using script file , here we taking ubutu vm and it has many default directories we get while installing, so its
better to create a new directory and install all the set up for k8s in that directory.

mkdir project, in this we work with k8s now.
vim minikube.sh
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install curl wget apt-transport-https -y
          sudo curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube
          sudo minikube version
          sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          sudo echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          sudo minikube start --driver=docker --force
now run thsi script as follows
         --> sh minikube.sh 
         ..............................................................................................
now the kubernatis has been installed now we can create pods bu using imparative or declarative method,
IMPERATIVE: creating pods by command line 

        --> kubectl run pod1 --image=sairamana07/movies:latest
        --> kubectl get pods --> to get list of pods 
        --> kubectl get pod -o wide --> it will give additional information  of pods
        --> kubectl describe pod pod1 --> it will give end to end info of pod.
        --> kubectl delete pod pod1 --> to delete pod.
        --> kubectl api-resources --> will give kubernatis information and help about commands.
        
DECLARATIVE: in this we create pod by manifest file, and this manifest file is in yaml format.        
                
        --> vim pod1.yml
                    apiVersion: V1
                    kind: pod
                    metadata:
                      name: pod1
                    spec:
                      containers:
                      - name: cont1
                      image: nginx
         NOT YET TO  BE COMPLETED
********************************************************************************************************************************************
DAY02,09-06-23.
 in generally when we got deleted the pod than the use not cannot able access the application like before, because in normal methods of pod 
 creation we have not to creat a replications of a pod so to over come this we have REPLICA SETS pod creation method.

REPLICA SETS: 
            -> it will creates multiple copys or replicas of a pod, if we delete one pod than the replica set create another pod.
            



        
              
              

